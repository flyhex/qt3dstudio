1. Scope

This document contains the instructions to build Qt3D Studio


2. What You Need

Clone the 3D Studio repository from

https://codereview.qt-project.org/#/admin/projects/qt3dstudio/qt3dstudio

Remember to add --recursive flag to the clone command, as the repository contains submodules
for 3rd party components. For example:

git clone --recursive https://codereview.qt-project.org/qt3dstudio/qt3dstudio

Additionally Qt 3D Studio Editor requires FBX SDK when FBX assets are used.
Tested Autodesk FBX SDK version is 2016.1.2.


3. Environment setup

3.1 Windows 10

You need Windows build tools. Download tools from
https://go.microsoft.com/fwlink/?LinkId=691126 .

For debugging the Qt 3D Studio do a custom installation and select Windows SDK.

Download the Windows version installer of FBX SDK 2016.1.2 from link:
http://download.autodesk.com/us/fbx_release_older/2016.1.2/fbx20161_2_fbxsdk_vs2015_win.exe
Install the SDK and set FBXSDK environment variable to point to
<installation directory>/Autodesk/FBX SDK/2016.1.2.
Or copy the folder to <path to repo root>/src/3rdparty/FBX

3.2 macOS

Download the macOS version of FBX SDK 2016.1.2 from link:
http://download.autodesk.com/us/fbx_release_older/2016.1.2/fbx20161_2_fbxsdk_clang_mac.pkg.tgz
Install the SDK. By default <installation directory> on macOS is /Applications. Set FBXSDK
environment variable point to <installation directory>/Autodesk/FBX SDK/2016.1.2.
Or copy the folder to <path to repo root>/src/3rdparty/FBX

3.3 Linux

Download the Linux version of FBX SDK 2016.1.2 from link:
http://images.autodesk.com/adsk/files/fbx20151_fbxsdk_linux.tar.gz
Install the SDK. By default <installation directory> on Linux is /usr.
Use custom location with the installer and set FBXSDK to point to that directory.
example:
mkdir ~/FBX
~/Downloads/fbx20161_2_fbxsdk_linux ~/FBX
export FBXSDK=/home/<user>/FBX
or set the FBXSDK environment variable in QtCreator.


4. Setup project in Qt Creator

Open <path to repo root>\qt3dstudio.pro in Qt Creator.

Go to "Projects" view. Select desired Build & Run configuration (either
Release, or Debug). Tested configurations:

    Windows 10: Qt 5.9.2 MSVC2015_64bit
    macOS:  Qt 5.9.2 clang_64
    Linux:  Qt 5.9.2 gcc 64bit

Under "Build steps" click "Add Build Step" and select "Make". To make
arguments type "install". This will move the qmlviewer plugin to correct
place under Qt.

If you encounter issues with missing debug symbols even when build target
is Debug, try adding argument "debug" for the first make step after qmake step.


5. Running Qt3DStudio

Run subproject Q3DStudio under Authoring

Quick Viewer example:
Open <path to qt3dstudio repo>\examples\qmldynamickeyframes\qmldynamickeyframes.pro in Qt Creator
and build it. Done!

6. Application deployment on Qt for Device Creation (Boot2Qt)

The deployment of applications using Qt 3D Studio happens in the same way as any other
application, depending on the used device. Follow the instructions on the
Qt for Device Creation homepage: http://doc.qt.io/QtForDeviceCreation.

7. Building and deploying on Android

Building Qt3DStudio:
- Go to "Projects" > "Build"
    - Add Build step: mingw32-make install
    - Disable "Make install" and "Build Android APK"
- Build normally

Building an application:
- Go to "Projects" > "Build"
    - Click "Build Android APK" > "Details" > "Create templates"
    - Enable "Make install" and "Build Android APK"
- Build normally

Deploying an application:
- Deploy normally (in "Edit" view, right click on project > "Deploy" or from menu "Build" >
  "Deploy Project").

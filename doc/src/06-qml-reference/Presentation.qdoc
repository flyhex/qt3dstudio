/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmltype Presentation
    \inqmlmodule QtStudio3D
    \brief Control type for Qt 3D Studio presentations.

    This type provides properties and methods for controlling a presentation.

    All methods provided by this type are queued and handled asynchronously before the next
    frame is displayed.

    \sa Studio3D
*/

/*!
    \qmlproperty url Presentation::source

    Holds the presentation source (\c{*.uia} or \c{*.uip}) file location.
    May be either a file URL or a qrc URL.
*/

/*!
    \qmlproperty SubPresentationSettings Presentation::subPresentationSettings

    Holds the settings for the subpresentations in the Qt 3D Studio presentation.

    This property is read-only.
*/

/*!
    \qmlmethod void Presentation::goToSlide(string elementPath, string name)

    Requests a time context (a Scene or a Component element) to change to a specific slide
    by \a name. If the context is already on that slide playback will start over.

    If \a elementPath points to a time context, that element is controlled. For
    all other element types the time context owning that element is controlled instead.
    You can target the command to a specific sub-presentation by adding "SubPresentationId:" in
    front of the element path, for example \c{"SubPresentationOne:Scene"}.
*/

/*!
    \qmlmethod void Presentation::goToSlide(string elementPath, int index)

    Requests a time context (a Scene or a Component element) to change to a specific slide by
    index \a index. If the context is already on that slide playback will start over.

    If \a elementPath points to a time context, that element is controlled. For
    all other element types the time context owning that element is controlled instead.
    You can target the command to a specific sub-presentation by adding "SubPresentationId:" in
    front of the element path, for example \c{"SubPresentationOne:Scene"}.
*/

/*!
    \qmlmethod void Presentation::goToSlide(string elementPath, bool next, bool wrap)

    Requests a time context (a Scene or a Component element) to change to the next or the
    previous slide, depending on the value of \a next. If the context is already at the
    last or first slide, \a wrap defines if change occurs to the opposite end.

    If \a elementPath points to a time context, that element is controlled. For
    all other element types the time context owning that element is controlled instead.
    You can target the command to a specific sub-presentation by adding "SubPresentationId:" in
    front of the element path, for example \c{"SubPresentationOne:Scene"}.
*/

/*!
    \qmlmethod void Presentation::goToTime(string elementPath, real time)

    Sets a time context (a Scene or a Component element) to a specific playback \a time in seconds.

    If \a elementPath points to a time context, that element is controlled. For
    all other element types the time context owning that element is controlled instead.
    You can target the command to a specific sub-presentation by adding "SubPresentationId:" in
    front of the element path, for example \c{"SubPresentationOne:Scene"}.

    The behavior when specifying a time before 0 or after the end time for the current slide depends
    on the play mode of the slide:
    \list
    \li \c{Stop at End} - values outside the valid time range instead clamp to the boundaries.
    For example, going to time -5 is the same as going to time 0.
    \li \c{Looping} - values outside the valid time range mod into the valid range. For example,
    going to time -4 on a 10 second slide is the same as going to time 6.
    \li \c{Ping Pong} - values outside the valid time range ‘bounce’ off the ends. For example,
    going to time -4 is the same as going to time 4 (assuming the time context is at least 4 seconds
    long), while going to time 12 on a 10 second slide is the same as going to time 8.
    \li \c{Ping} - values less than 0 are treated as time 0, while values greater than the endtime
    bounce off the end (eventually hitting 0.)
    \endlist
*/

/*!
    \qmlmethod void Presentation::setAttribute(string elementPath, string attributeName,
                                               variant value)

    Sets the \a value of an attribute on an element found at \a elementPath. The \a attributeName is
    the \l{QML Reference: Attribute Names}{scripting name} of the attribute.

    You can target the command to a specific sub-presentation by adding "SubPresentationId:" in
    front of the element path, for example \c{"SubPresentationOne:Scene.Mesh.Material"}.

    The attribute must be preserved for scripting to be set by this function, or else it will fail.
    An attribute is preserved if it is either \e{animated}, or
    \e{an attribute on a master element that is unlinked and changed per-slide}.
*/

/*!
    \qmlmethod void Presentation::setPresentationActive(string id, bool active)

    Stops or starts updates to a sub-presentation based on the \a active flag. The presentation is
    referenced to by the \a id, which is the name of the presentation without the \c{.uip}.

    Making a presentation inactive prevents any elements, behaviors, and animations within it from
    updating. It also prevents any events within that presentation from being processed. It does
    not, however, prevent the presentation from rendering. An inactive presentation will continue
    to render using its last-updated information.

    Explicitly inactivating presentations can provide a significant performance increase, depending
    on the number and size of the presentations that are inactive. Inactive presentations are not
    ‘paused’. When the presentation is re-activated, animations will resume at the time they should
    be had they been running, not where they were when the presentation was made inactive.
*/

/*!
    \qmlmethod void Presentation::fireEvent(string elementPath, string eventName)

    Dispatches an event with \a eventName on a specific element found in \a elementPath. Appropriate
    Appropriate actions created in Qt 3D Studio or callbacks registered using the registerForEvent()
    method in attached scripts will be executed in response to the event.

    You can target the command to a specific sub-presentation by adding "SubPresentationId:" in
    front of the element path, for example \c{"SubPresentationOne:Scene.Mesh"}.
*/

/*!
    \qmlmethod void Presentation::setGlobalAnimationTime(int64 milliseconds)

    Sets the global animation time to \a milliseconds. Setting the global animation time to a
    non-zero value will disable the automatic animation timer. Setting the value to zero
    resumes automatic animation timer.
*/

/*!
    \qmlmethod void Presentation::setDataInputValue(string name, variant value)
    \since QtStudio3D 1.1

    Sets the \a value of a data input element \a name in the presentation.
*/

/*!
    \qmlsignal Presentation::slideEntered(string elementPath, int index, string name)

    This signal is emitted when a slide is entered in the presentation.
    The \a elementPath specifies the time context (a Scene or a Component element) owning the
    entered slide.
    The \a index and \a name contain the index and the name of the entered slide.
*/

/*!
    \qmlsignal Presentation::slideExited(string elementPath, int index, string name)

    This signal is emitted when a slide is exited in the presentation.
    The \a elementPath specifies the time context (a Scene or a Component element) owning the
    exited slide.
    The \a index and \a name contain the index and the name of the exited slide.
*/

/*!
    \qmlsignal Presentation::sourceChanged(url source)

    This signal is emitted when the source property has changed.
    The new value is provided in the \a source parameter.

    The corresponding handler is \c onSourceChanged.
*/

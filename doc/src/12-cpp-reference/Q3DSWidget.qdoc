/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \class Q3DSWidget
    \inheaderfile q3dswidget.h
    \inmodule QtStudio3D
    \brief Displays a Qt 3D Studio presentation on a widget.

    Q3DSWidget is used to specify a render widget for Qt 3D Studio presentation.

    \section2 Example Usage

    \code
    Q3DSWidget viewer;
    viewer.presentation()->setSource(QUrl(QStringLiteral("qrc:/my_presentation.uip")));
    viewer.setUpdateInterval(0);
    viewer.settings()->setScaleMode(Q3DSViewerSettings::ScaleModeFill);
    viewer.settings()->setShowRenderStats(true);

    // Register a scene element object for slide management (optional)
    Q3DSSceneElement scene(viewer.presentation(), QStringLiteral("Scene"));

    // Register an element object for attribute setting (optional)
    Q3DSElement element(viewer.presentation(), QStringLiteral("Scene.Layer.myLabel"));

    viewer.initialize();
    \endcode

    \sa Q3DSSurfaceViewer
*/

/*!
    \property Q3DSWidget::updateInterval

    Holds the viewer update interval in milliseconds. If the value is negative, the viewer doesn't
    update the presentation automatically.

    The default value is -1.

    \sa QWidget::update()
*/

/*!
    \property Q3DSWidget::running

    The value of this property is \c true when the viewer has been initialized and the presentation
    is running.

    This property is read-only.
*/

/*!
    \fn bool Q3DSWidget::initialize()

    Initializes Q3DSWidget to render the presentation.

    The source property of the attached presentation must be set before the viewer can be
    initialized.

    Returns whether the initialization succeeded.

    \sa running, Q3DSPresentation::source, presentation()
*/

/*!
    \fn Q3DSViewerSettings *Q3DSWidget::settings() const

    Returns the settings object used by the Q3DSWidget.
*/

/*!
    \fn Q3DSPresentation *Q3DSWidget::presentation() const

    Returns the presentation object used by the Q3DSWidget.
*/

/*!
    \fn Q3DSWidget::shutdown()

    Deallocates all resources of the viewer.
*/

/*!
    \fn Q3DSWidget::reset()

    Deallocates and recreates all resources of the viewer and sets the presentation time
    back to the beginning.
*/

/*!
    \fn Q3DSWidget::mousePressEvent(QMouseEvent *event)
    \reimp
*/

/*!
    \fn Q3DSWidget::mouseReleaseEvent(QMouseEvent *event)
    \reimp
*/

/*!
    \fn Q3DSWidget::mouseMoveEvent(QMouseEvent *event)
    \reimp
*/

/*!
    \fn Q3DSWidget::wheelEvent(QWheelEvent *event)
    \reimp
*/

/*!
    \fn Q3DSWidget::keyPressEvent(QKeyEvent *event)
    \reimp
*/

/*!
    \fn Q3DSWidget::keyReleaseEvent(QKeyEvent *event)
    \reimp
*/

/*!
    \fn Q3DSWidget::initializeGL()
    \reimp
*/

/*!
    \fn Q3DSWidget::resizeGL(int w, int h)
    \reimp
*/

/*!
    \fn Q3DSWidget::paintGL()
    \reimp
*/


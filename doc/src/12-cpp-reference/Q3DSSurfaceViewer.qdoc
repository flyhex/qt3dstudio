/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \class Q3DSSurfaceViewer
    \inheaderfile q3dssurfaceviewer.h
    \inmodule QtStudio3D
    \brief Displays a Qt 3D Studio presentation on a surface.

    Q3DSSurfaceViewer is used to specify a render surface for Qt 3D Studio presentation.
    Supported surface types are QOffscreenSurface and QWindow.

    \section2 Example Usage

    \code
    // Create a surface
    QWindow window;
    window.setSurfaceType(QSurface::OpenGLSurface);
    window.create();

    // Create an OpenGL context
    QOpenGLContext context;
    context.setFormat(window.format());
    context.create();

    // Create the viewer
    Q3DSSurfaceViewer viewer;
    viewer.presentation()->setSource(QUrl(QStringLiteral("qrc:/my_presentation.uip")));
    viewer.setUpdateInterval(0);
    viewer.settings()->setScaleMode(Q3DSViewerSettings::ScaleModeFill);
    viewer.settings()->setShowRenderStats(true);

    // Register a scene object for slide management (optional)
    Q3DSSceneElement scene(viewer.presentation(), QStringLiteral("Scene"));

    // Register an element object for attribute setting (optional)
    Q3DSElement element(viewer.presentation(), QStringLiteral("Scene.Layer.myLabel"));

    viewer.initialize(&window, &context);
    \endcode

    \sa Q3DSWidget
*/

/*!
    \property Q3DSSurfaceViewer::size

    Holds the desired size of the presentation.

    The default value is (-1, -1).

    \sa autoSize
*/

/*!
    \property Q3DSSurfaceViewer::autoSize

    Specifies whether the viewer should change the size of the presentation automatically
    to match the surface size when surface size changes.
    The \l{Q3DSSurfaceViewer::size}{size} property is updated automatically whenever the viewer
    is \l{Q3DSSurfaceViewer::update()}{updated} if this property value is \c{true}.

    \note For QOffscreenSurface, the surface size is typically 1x1, so generally you will want
    to set autoSize to \c false when using offscreen surfaces.

    The default value is \c{true}.
*/

/*!
    \property Q3DSSurfaceViewer::updateInterval

    Holds the viewer update interval in milliseconds. If the value is negative, the viewer doesn't
    update the presentation automatically.

    The default value is -1.

    \sa update()
*/

/*!
    \property Q3DSSurfaceViewer::running

    The value of this property is \c true when the viewer has been initialized and the presentation
    is running.

    This property is read-only.
*/

/*!
    \fn bool Q3DSSurfaceViewer::initialize(QSurface *surface, QOpenGLContext *context, GLuint fboId)

    Initializes Q3DSSurfaceViewer to render the presentation to the given \a surface using
    the \a context and optional framebuffer id (\a fboId). If \a fboId is omitted, it defaults
    to zero.

    The source property of the attached presentation must be set before the viewer can be
    initialized.

    Returns whether the initialization succeeded.

    \sa running, Q3DSPresentation::source, presentation()
*/

/*!
    \fn QImage Q3DSSurfaceViewer::grab(const QRect &rect)

    Grabs the data rendered to the framebuffer into an image using the given \a rect.
    The \a rect parameter is optional. If it is omitted, the whole framebuffer is captured.
*/

/*!
    \fn int Q3DSSurfaceViewer::fboId() const

    Returns the framebuffer id given in initialization.

    \sa initialize()
*/

/*!
    \fn QSurface *Q3DSSurfaceViewer::surface() const

    Returns the surface given in initialization.

    \sa initialize()
*/

/*!
    \fn QOpenGLContext *Q3DSSurfaceViewer::context() const

    Returns the context given in initialization.

    \sa initialize()
*/

/*!
    \fn Q3DSViewerSettings *Q3DSSurfaceViewer::settings() const

    Returns the settings object used by the Q3DSSurfaceViewer.
*/

/*!
    \fn Q3DSPresentation *Q3DSSurfaceViewer::presentation() const

    Returns the presentation object used by the Q3DSSurfaceViewer.
*/

/*!
    \fn Q3DSSurfaceViewer::update()

    Updates the surface viewer with a new frame.
*/

/*!
    \fn Q3DSSurfaceViewer::shutdown()

    Deallocates all resources of the viewer.
*/

/*!
    \fn Q3DSSurfaceViewer::reset()

    Deallocates and recreates all resources of the viewer and sets the presentation time
    back to the beginning.
*/


/****************************************************************************
**
** Copyright (C) 1993-2009 NVIDIA Corporation.
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\title Creating Binary Presentations
\page best-practices-creating-binary-and-optimized-presentations.html
\ingroup qt3dstudio-best-practices

In order to optimize the load
times and playback experience of a project, Qt 3D Studio allows a
presentation to be compressed into and viewed in binary format. This is
a recommended step of deploying a project in a production environment.
There are two types of compilation, available in different formats:

\list
\li
  Compiling the presentation assets for faster loading
\li
  Gathering shader information to precompile them at application launch
\endlist
Read on for further descriptions of what these mean, how to accomplish
them, and when and when \e{not} to do them.

\section1 Compiling Assets

\section2 What it Does

Compiles \c{.uia} and \c{.uip} files to a binary representation. This can speed initial loading of
an application substantially.

\section2 How to Do It

From the command line on Windows, run the \c{Qt3DCompiler.exe} application \e{(in your
installation directory next to \c{Qt3DStudio.exe})} passing a command line argument of the
\c{.uia} application file.

\c{Qt3DCompiler.exe \path\to\project\MyAppName.uia}

The files end up in a \c{binary/} directory next to your \c{.uia} application file. You can then
run your application by passing the \c{.uib} file to the Viewer.

\c{Qt3DViewer.exe \path\to\project\binary\MyAppName.uib}

\section2 When To Do It

Only perform binarization when:

\list
\li
  you are about to deploy your content for production or demo, or
\li
  you need to test loading speeds of your content.
\endlist
Once you perform binarization subsequent changes to your presentations
will \b{not} be reflected in the runtime until you
delete the \c{binary} folder, or re-run binarization. Prematurely
running binarization, and then forgetting that you have done so, is a
good way to run into head-scratching problems later on.

\section1 Gathering Shaders

\section2 What It Does

In short, it removes performance hiccups due to shader compilation in
the middle of application execution by precompiling the necessary
shaders when your application first starts.

\section2 Background

When you are working on a project you will see lines like this in the
output each time you preview your presentation:

\badcode
eDEBUG_WARNING Failed to find file: /path/to/project/binary/shadercache.xml
eDEBUG_WARNING Searched paths:
eDEBUG_WARNING /path/to/project/binary/shadercache.xml
\endcode
Although it may look bad \e{(\"it has three lines, and said
`failed'!\")} this is not an error. It is only a \e{warning} about
\e{potential} performance problems. In short, ignore these log lines
until you are either testing loading speed and performance, or you are
preparing your content for final production use.

\section3 About Shaders and Shader Compilation

The Qt 3D Studio Runtime uses shaders to render your content at
high speed. Shaders are mini programs that run on the graphics card. As
programs, they need to be compiled to run, and they have to compile on
the graphics card itself. Depending on the Standard Material settings or
custom materials used in your presentation, you may have several shaders
that need to compile. Compiling each shader takes a short amount of time
(depending on the complexity of the shader)...but however slow or
fast it is, it is not instant.

Because of the dynamic nature of Studio presentations, and the fact that
different settings for a Standard Material may cause a different shader
to be generated, the Runtime does not know in advance what shaders may
be necessary. Only once you go to a particular slide where a combination
of settings are applied does it \"see\" the material for the first time,
and need to compile it to render your content. The result when this
happens is that you may experience a slight lurch when you switch to a
particular slide for the first time.

\section2 How to Do It

You can remove any performance lurches by pre-compiling the shaders you
will need when the presentation starts up. This is what the
\c{shadercache.xml} file is for. This file tells the Runtime all
the information it needs about all the shaders that will be required.
When present, the Runtime creates all the shaders at startup, so they
are ready when needed.

\omit

TODO: Reintroduce support for shader caching (BOUL-728)

\list 1
\li
  From the command line, change to the directory for the Viewer
  application.
\li
  \c{Qt3DViewer.exe -D<graphicsdevice> -saveShaders \path\to\project\myapp.uia}
\endlist
\list
\li
  \b{\c{<graphicsdevice>}} must be one
  of \c{GL2}, \c{GLES2}, \c{GL3}, or \c{GLES3} (e.g.
  \c{-DGL3}), specifying the target graphics device to create
  shaders for.
\li
  \e{The Viewer will start, showing your application.}
\endlist
\list 2
\li
  Run through your application, causing every unique material
  combination that you want cached to be displayed. If the viewer does
  not see a particular material during this step, it will not be
  included in the cache.
\li
  Quit the viewer.
\endlist
\list
\li
  \e{This will create a
  \c{binary\shadercache.xml} XML file.}
\endlist
\list 4
\li
  Run your application as you normally would, i.e. either
  \c{Qt3DViewer.exe \path\to\project\myapp.uia}
  or
  \c{Qt3DViewer.exe \path\to\project\binary\myapp.uib}
\endlist

\endomit

\section2 When to Do It

The presence of a \c{shadercache.xml} file can cause old shader
information to be cached and used instead of your current information.
If custom materials are updated - or the implementation is updated in a
new Qt 3D Studio releases - your old shader cache can override the
new information, causing rendering problems. You should only generate a
shader cache when you need to test final performance, or display a demo
where you cannot pre-navigate the interface once to cause the
compilation to occur and remove any hiccups.

*/
